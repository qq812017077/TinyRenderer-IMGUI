#include "WindowMsgMap.h"

#define REGISTER_PAIR(X) {X, #X}

WindowMsgMap::WindowMsgMap() noexcept:
    map({
        REGISTER_PAIR( WM_CREATE ),
		REGISTER_PAIR( WM_DESTROY ),
		REGISTER_PAIR( WM_MOVE ),
		REGISTER_PAIR( WM_SIZE ),
		REGISTER_PAIR( WM_ACTIVATE ),
		REGISTER_PAIR( WM_SETFOCUS ),
		REGISTER_PAIR( WM_KILLFOCUS ),
		REGISTER_PAIR( WM_ENABLE ),
		REGISTER_PAIR( WM_SETREDRAW ),
		REGISTER_PAIR( WM_SETTEXT ),
		REGISTER_PAIR( WM_GETTEXT ),
		REGISTER_PAIR( WM_GETTEXTLENGTH ),
		REGISTER_PAIR( WM_PAINT ),
		REGISTER_PAIR( WM_CLOSE ),
		REGISTER_PAIR( WM_QUERYENDSESSION ),
		REGISTER_PAIR( WM_QUIT ),
		REGISTER_PAIR( WM_QUERYOPEN ),
		REGISTER_PAIR( WM_ERASEBKGND ),
		REGISTER_PAIR( WM_SYSCOLORCHANGE ),
		REGISTER_PAIR( WM_ENDSESSION ),
		REGISTER_PAIR( WM_SHOWWINDOW ),
		REGISTER_PAIR( WM_CTLCOLORMSGBOX ),
		REGISTER_PAIR( WM_CTLCOLOREDIT ),
		REGISTER_PAIR( WM_CTLCOLORLISTBOX ),
		REGISTER_PAIR( WM_CTLCOLORBTN ),
		REGISTER_PAIR( WM_CTLCOLORDLG ),
		REGISTER_PAIR( WM_CTLCOLORSCROLLBAR ),
		REGISTER_PAIR( WM_CTLCOLORSTATIC ),
		REGISTER_PAIR( WM_WININICHANGE ),
		REGISTER_PAIR( WM_SETTINGCHANGE ),
		REGISTER_PAIR( WM_DEVMODECHANGE ),
		REGISTER_PAIR( WM_ACTIVATEAPP ),
		REGISTER_PAIR( WM_FONTCHANGE ),
		REGISTER_PAIR( WM_TIMECHANGE ),
		REGISTER_PAIR( WM_CANCELMODE ),
		REGISTER_PAIR( WM_SETCURSOR ),
		REGISTER_PAIR( WM_MOUSEACTIVATE ),
		REGISTER_PAIR( WM_CHILDACTIVATE ),
		REGISTER_PAIR( WM_QUEUESYNC ),
		REGISTER_PAIR( WM_GETMINMAXINFO ),
		REGISTER_PAIR( WM_ICONERASEBKGND ),
		REGISTER_PAIR( WM_NEXTDLGCTL ),
		REGISTER_PAIR( WM_SPOOLERSTATUS ),
		REGISTER_PAIR( WM_DRAWITEM ),
		REGISTER_PAIR( WM_MEASUREITEM ),
		REGISTER_PAIR( WM_DELETEITEM ),
		REGISTER_PAIR( WM_VKEYTOITEM ),
		REGISTER_PAIR( WM_CHARTOITEM ),
		REGISTER_PAIR( WM_SETFONT ),
		REGISTER_PAIR( WM_GETFONT ),
		REGISTER_PAIR( WM_QUERYDRAGICON ),
		REGISTER_PAIR( WM_COMPAREITEM ),
		REGISTER_PAIR( WM_COMPACTING ),
		REGISTER_PAIR( WM_NCCREATE ),
		REGISTER_PAIR( WM_NCDESTROY ),
		REGISTER_PAIR( WM_NCCALCSIZE ),
		REGISTER_PAIR( WM_NCHITTEST ),
		REGISTER_PAIR( WM_NCPAINT ),
		REGISTER_PAIR( WM_NCACTIVATE ),
		REGISTER_PAIR( WM_GETDLGCODE ),
		REGISTER_PAIR( WM_NCMOUSEMOVE ),
		REGISTER_PAIR( WM_NCLBUTTONDOWN ),
		REGISTER_PAIR( WM_NCLBUTTONUP ),
		REGISTER_PAIR( WM_NCLBUTTONDBLCLK ),
		REGISTER_PAIR( WM_NCRBUTTONDOWN ),
		REGISTER_PAIR( WM_NCRBUTTONUP ),
		REGISTER_PAIR( WM_NCRBUTTONDBLCLK ),
		REGISTER_PAIR( WM_NCMBUTTONDOWN ),
		REGISTER_PAIR( WM_NCMBUTTONUP ),
		REGISTER_PAIR( WM_NCMBUTTONDBLCLK ),
		REGISTER_PAIR( WM_KEYDOWN ),
		REGISTER_PAIR( WM_KEYUP ),
		REGISTER_PAIR( WM_CHAR ),
		REGISTER_PAIR( WM_DEADCHAR ),
		REGISTER_PAIR( WM_SYSKEYDOWN ),
		REGISTER_PAIR( WM_SYSKEYUP ),
		REGISTER_PAIR( WM_SYSCHAR ),
		REGISTER_PAIR( WM_SYSDEADCHAR ),
		REGISTER_PAIR( WM_KEYLAST ),
		REGISTER_PAIR( WM_INITDIALOG ),
		REGISTER_PAIR( WM_COMMAND ),
		REGISTER_PAIR( WM_SYSCOMMAND ),
		REGISTER_PAIR( WM_TIMER ),
		REGISTER_PAIR( WM_HSCROLL ),
		REGISTER_PAIR( WM_VSCROLL ),
		REGISTER_PAIR( WM_INITMENU ),
		REGISTER_PAIR( WM_INITMENUPOPUP ),
		REGISTER_PAIR( WM_MENUSELECT ),
		REGISTER_PAIR( WM_MENUCHAR ),
		REGISTER_PAIR( WM_ENTERIDLE ),
		REGISTER_PAIR( WM_MOUSEWHEEL ),
		REGISTER_PAIR( WM_MOUSEMOVE ),
		REGISTER_PAIR( WM_LBUTTONDOWN ),
		REGISTER_PAIR( WM_LBUTTONUP ),
		REGISTER_PAIR( WM_LBUTTONDBLCLK ),
		REGISTER_PAIR( WM_RBUTTONDOWN ),
		REGISTER_PAIR( WM_RBUTTONUP ),
		REGISTER_PAIR( WM_RBUTTONDBLCLK ),
		REGISTER_PAIR( WM_MBUTTONDOWN ),
		REGISTER_PAIR( WM_MBUTTONUP ),
		REGISTER_PAIR( WM_MBUTTONDBLCLK ),
		REGISTER_PAIR( WM_PARENTNOTIFY ),
		REGISTER_PAIR( WM_MDICREATE ),
		REGISTER_PAIR( WM_MDIDESTROY ),
		REGISTER_PAIR( WM_MDIACTIVATE ),
		REGISTER_PAIR( WM_MDIRESTORE ),
		REGISTER_PAIR( WM_MDINEXT ),
		REGISTER_PAIR( WM_MDIMAXIMIZE ),
		REGISTER_PAIR( WM_MDITILE ),
		REGISTER_PAIR( WM_MDICASCADE ),
		REGISTER_PAIR( WM_MDIICONARRANGE ),
		REGISTER_PAIR( WM_MDIGETACTIVE ),
		REGISTER_PAIR( WM_MDISETMENU ),
		REGISTER_PAIR( WM_CUT ),
		REGISTER_PAIR( WM_COPYDATA ),
		REGISTER_PAIR( WM_COPY ),
		REGISTER_PAIR( WM_PASTE ),
		REGISTER_PAIR( WM_CLEAR ),
		REGISTER_PAIR( WM_UNDO ),
		REGISTER_PAIR( WM_RENDERFORMAT ),
		REGISTER_PAIR( WM_RENDERALLFORMATS ),
		REGISTER_PAIR( WM_DESTROYCLIPBOARD ),
		REGISTER_PAIR( WM_DRAWCLIPBOARD ),
		REGISTER_PAIR( WM_PAINTCLIPBOARD ),
		REGISTER_PAIR( WM_VSCROLLCLIPBOARD ),
		REGISTER_PAIR( WM_SIZECLIPBOARD ),
		REGISTER_PAIR( WM_ASKCBFORMATNAME ),
		REGISTER_PAIR( WM_CHANGECBCHAIN ),
		REGISTER_PAIR( WM_HSCROLLCLIPBOARD ),
		REGISTER_PAIR( WM_QUERYNEWPALETTE ),
		REGISTER_PAIR( WM_PALETTEISCHANGING ),
		REGISTER_PAIR( WM_PALETTECHANGED ),
		REGISTER_PAIR( WM_DROPFILES ),
		REGISTER_PAIR( WM_POWER ),
		REGISTER_PAIR( WM_WINDOWPOSCHANGED ),
		REGISTER_PAIR( WM_WINDOWPOSCHANGING ),
		REGISTER_PAIR( WM_HELP ),
		REGISTER_PAIR( WM_NOTIFY ),
		REGISTER_PAIR( WM_CONTEXTMENU ),
		REGISTER_PAIR( WM_TCARD ),
		REGISTER_PAIR( WM_MDIREFRESHMENU ),
		REGISTER_PAIR( WM_MOVING ),
		REGISTER_PAIR( WM_STYLECHANGED ),
		REGISTER_PAIR( WM_STYLECHANGING ),
		REGISTER_PAIR( WM_SIZING ),
		REGISTER_PAIR( WM_SETHOTKEY ),
		REGISTER_PAIR( WM_PRINT ),
		REGISTER_PAIR( WM_PRINTCLIENT ),
		REGISTER_PAIR( WM_POWERBROADCAST ),
		REGISTER_PAIR( WM_HOTKEY ),
		REGISTER_PAIR( WM_GETICON ),
		REGISTER_PAIR( WM_EXITMENULOOP ),
		REGISTER_PAIR( WM_ENTERMENULOOP ),
		REGISTER_PAIR( WM_DISPLAYCHANGE ),
		REGISTER_PAIR( WM_STYLECHANGED ),
		REGISTER_PAIR( WM_STYLECHANGING ),
		REGISTER_PAIR( WM_GETICON ),
		REGISTER_PAIR( WM_SETICON ),
		REGISTER_PAIR( WM_SIZING ),
		REGISTER_PAIR( WM_MOVING ),
		REGISTER_PAIR( WM_CAPTURECHANGED ),
		REGISTER_PAIR( WM_DEVICECHANGE ),
		REGISTER_PAIR( WM_PRINT ),
		REGISTER_PAIR( WM_PRINTCLIENT ),
		REGISTER_PAIR( WM_IME_SETCONTEXT ),
		REGISTER_PAIR( WM_IME_NOTIFY ),
		REGISTER_PAIR( WM_NCMOUSELEAVE ),
		REGISTER_PAIR( WM_EXITSIZEMOVE ),
		// REGISTER_PAIR( WM_UAHDESTROYWINDOW ),
		REGISTER_PAIR( WM_DWMNCRENDERINGCHANGED ),
		REGISTER_PAIR( WM_ENTERSIZEMOVE )
    })
{
    
}

std::string WindowMsgMap::operator()(UINT msg, LPARAM lParam, WPARAM wParam) const noexcept
{
	auto it = map.find(msg);
	if (it != map.end())
	{
		return it->second + "    LParam: " + std::to_string(lParam) + "    WParam: " + std::to_string(wParam);
	}
	return "Unknown message";
}